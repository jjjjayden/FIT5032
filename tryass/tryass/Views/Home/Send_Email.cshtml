@model tryass.Models.SendEmailViewModel

@{
    ViewBag.Title = "Send Email to Users";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="mb-4">Select Users to Send Email</h2>

@using (Html.BeginForm("Send_Email", "Home", FormMethod.Post, new { @class = "bg-light p-4 rounded", enctype = "multipart/form-data" }))

{
    @Html.AntiForgeryToken()

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Select</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Users.Count; i++)
            {
                <tr>
                    <td>@Html.CheckBoxFor(m => m.Users[i].IsSelected, new { @class = "mr-2" })</td>
                    <td>@Html.DisplayFor(m => m.Users[i].Email)</td>
                    @Html.HiddenFor(m => m.Users[i].Id)
                </tr>
            }
        </tbody>
    </table>

    <div class="form-group">
        @Html.LabelFor(m => m.Subject)
        @Html.EditorFor(m => m.Subject, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(m => m.Subject, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Contents)
        @Html.TextAreaFor(m => m.Contents, new { htmlAttributes = new { @class = "form-control", @rows = "5" } })
        @Html.ValidationMessageFor(m => m.Contents, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.SelectedTemplate, "Choose Template")
        @Html.DropDownListFor(m => m.SelectedTemplate,
                    new SelectList(Model.AvailableTemplates, "Name", "Name"),
                    "Select a Template",
                    new { @class = "form-control", @onchange = "loadTemplateContent();" })

    </div>

    <div class="form-group">
        @Html.Label("Attachment")
        <input type="file" name="Attachment" class="form-control" />
    </div>

    <input type="submit" value="Send Email" class="btn btn-primary" />
}

@if (!string.IsNullOrEmpty(ViewBag.Result))
{
    <div class="alert alert-success mt-4">
        @ViewBag.Result
    </div>
}
<script>
    function loadTemplateContent() {
        var selectedTemplateName = document.getElementById("SelectedTemplate").value;
        var templates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableTemplates));


        var selectedTemplate = templates.find(t => t.Name === selectedTemplateName);
        if (selectedTemplate) {
if (selectedTemplate) {
    var subjectElement = document.getElementById("@Html.IdFor(m => m.Subject)");
    var contentElement = document.getElementById("@Html.IdFor(m => m.Contents)");
    subjectElement.value = selectedTemplate.Subject;
    contentElement.value = selectedTemplate.Content;
}


        }
    }
</script>
